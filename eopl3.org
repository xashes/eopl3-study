#+TITLE: Eessential of Programming Languages

* 1. Inductive Sets of Data

** Recursively Specified Data

*** Inductive Specification
用于指定一个集合
举例，使用这种方法描述自然数集合 N = {0, 1, 2, ...} 的特定子集 S
Top-down version for judgement or testing, the others for generating.

**** Definition 1.1.1 - /top-down/ version
     A natural number n is in S if and only if
     1. n = 0, or
     2. n - 3 \in S.
        #+begin_src emacs-lisp :tangle yes
          ;; in-S? : N -> Bool
          ;; usage: (in-s? n) = #t if n is in S, #f otherwise
          (defun in-S? (n)
            (cond
             ((zerop n) t)
             ((< (- n 3) 0) nil)
             (t (in-S? (- n 3)))))

          (in-S? 9)
        #+end_src

        #+RESULTS:
        : t

**** Definition 1.1.2
Define the set S to be the smallest set contained in N and satisfying the following two properties:
***** /bottom-up/ version
     1. 0 \in S, and
     2. if n \in S, then n + 3 \in S
***** Rules of inference version
     1. 0 \in S (axiom) (rule of inference)
        (a rule with no hypotheses is called an axiom.)
     2. n \in S / (n + 3) \in S (rule of inference)
        (hypothesis or antecedent) / (conclusion or consequent)
**** Definition 1.1.3 (list of integers, top-down)
a list of integers if and only if either
1. it is the empty list, or
2. it is a pair whose car is an integer and whose cdr is a list of integers.
#+begin_src racket
#lang racket

(define/contract (list-of-int? l)
  (-> list? boolean?)
  (if (empty? l)
      #t
      (and (integer? (car l))
           (list-of-int? (cdr l)))
      )
  )
(list-of-int? '(1 2 3))
#+end_src

#+RESULTS:
: #t

The tree-like picture below is called a derivation or deduction tree.
14 \in N    () \in List-of-Int /
3 \in N    (14 . ()) \in List-of-Int /
(3 . (14 . ())) \in List-of-Int

*** Exercise 1.1 Write inductive definitions of the following sets. Write each definition in all three styles (top-down, bottom-up, and rules of inference). Using your rules, show the derivation of some sample elements of each set.
**** 1. {3n + 2 | n ∈ N}
***** Top-down
      A natural number n is in S if and only if
      1. n = 2, or
      2. n - 3 \in S
***** Bottom-up
      Define the set S to be the smallest set contained in N and satisfying the following two properties:
      1. 2 \in S, and
      2. if n \in S, then n + 3 \in S
***** Rules of inference
      1. 2 \in S
      2. n \in S / (n + 3) \in S
**** 2. {2n + 3m + 1 | n, m ∈ N}
***** Top-down
      A natural number n is in S if and only if
      1. n = 1, or
      2. n - 2 \in S, or
      3. n - 3 \in S
***** Bottom-up
      Define the set S to be the smallest set contained in N and satisfying the following two properties:
      1. 1 \in S, and
      2. if n \in S, then n + 2 \in S and n + 3 \in S
***** Rules of inference
      1. 1 \in S
      2. n \in S / ((n + 2) \in S, (n + 3) \in S)
**** 3. {(n, 2n + 1) | n ∈ N}
***** Top-down
      A pair of natural numbers (n, m) is in S if and only if
      1. n = 0 and m = 1, or
      2. (n - 1, m - 2) \in S
***** Bottom-up
      Define the set S to be the smallest set contained in {n, m | n \in N, m \in N}, and satisfying the following two properties:
      1. (0, 1) \in S, and
      2. if (n, m) \in S, then (n + 1, m + 2) \in S
***** Rules of inference
      1. (0, 1) \in S
      2. (n, m) \in S / (n + 1, m + 2) \in S
**** 4. {(n, n^2) | n ∈ N} Do not mention squaring in your rules. As a hint, remember the equation (n + 1)^2 = n^2 + 2n + 1.
***** Top-down
      A pair of natural numbers (n, m) is in S if and only if
      1. n = 0 and m = 0, or
      2. (n - 1, m - 2n + 1) \in S
***** Bottom-up
      Define the set S to be the smallest set contained in {n, m | n \in N, m \in N}, and satisfying the following two properties:
      1. (0, 0) \in S, and
      2. if (n, m) \in S, then (n + 1, m + 2n + 1) \in S
***** Rules of inference
      1. (0, 0) \in S
      2. (n, m) \in S / (n + 1, m + 2n + 1) \in S

*** Exercise 1.2 What sets are defined by the following pairs of rules? Explain why.
    1. (0, 1) ∈ S, (n, k) ∈ S / (n + 1, k + 7) ∈ S
       {(n, 7n + 1) | n \in N}
    2. {(n, 2^n) | n \in N}
    3. {(n, fib(n), fib(n+1)) | n \in N}
       where fib is defined as:
       #+begin_src emacs-lisp
         (defun fib (n)
           (cond
            ((zerop n) 0)
            ((= n 1) 1)
            ((> n 1)
             (+ (fib (- n 1))
                (fib (- n 2))))))
         (fib 6)
       #+end_src

       #+RESULTS:
       : 8

** 1.1.2 Defining Sets Using Grammars
   在定义操作归纳式定义的数据的过程时，过程的结构要与数据的结构相匹配。
   - 对 grammar 中的每个 nonterminal 写一个过程。过程只负责处理 nonterminal 对应的数据。
   - 在过程中，为 nonterminal 对应的每个 production 写一个分支。对出现在右侧的每个 nonterminal，写一个此 nonterminal 的过程的递归调用。

   - Nonterminal Symbols: 被定义的集合名称，这些集合有时也被称为 syntactic categories

   - Terminal Symbols: characters in the external representation, eg. (, ) or .

   - Productions: rules. Look like,
     List-of-Int ::= ()
     read "List-of-Int is(or can be) ()"
     左侧是作为集合名称的非终止符
     右侧指明构造左侧集合成员的方法，基于其它集合和休止符

*** notational shortcuts
- | (read "or")
  List-of-Int ::= ()
                | (Int . List-of-Int) |
- Kleene star or plus
  List-of-Int ::= ({Int}*)
  "*" - zero or more
  "+" - one or more
  {Int}*(c) - "separated list" notation. c is the separater.
*** syntactic derivation
用于判定给定数据是否为集合成员
例如，给定 (14 . ()), 判定形式为
List-of-Int
=> (Int . List-of-Int)
=> (Int . ())
=> (14 . ())
*** Definition 1.1.6 (s-list, s-exp)
S-list ::= ()
         | (S-exp . S-list)
S-exp ::= Symbol | S-list
*** Def 1.1.7 (binary tree)
Bintree ::= Int | (Symbol Bintree Bintree)
*** Def 1.1.8 lambda expression
The *lambda calculus* is a simple language that is ofter used to study the theory of programming languages.

LcExp ::= Identifier
      ::= (lambda (Identifier) LcExp) # bound variable
      ::= (LcExp LcExp)
where an identifier is any symbol other than /lambda/.
** 1.1.3 Induction
*** Theorem 1.1.1 Let t be a binary tree, as defined in definition 1.1.7. Then t contains an odd number of nodes.
The key to the proof is that the substructures of a tree t are always smaller than t itself. This pattern of proof is called *structural induction*.
*** Proof by Structural Induction
To prove that a proposition IH(s) is true for all structures s, prove the following:
1. IH is true on simple structures (those without substructures)
2. If IH is true on the substructures of s, then it is true on s itself.
** 1.2 Deriving Recursive Programs
*Follow the Grammar*

when defining a procedure that operates on inductively defined data, the structure of the program should be patterned after the structure of the data.

- write one procedure for each nonterminal in the grammar. The procedure will be responsible for handling the data corresponding to that nonterminal, *and nothing else*.
- In each procedure, write one alternative for each production corresponding to that nonterminal. For each nonterminal that appears in the right-hand, write a recursive call to the procedure for that nonterminal.

*** 1.2.1 list-length
#+begin_src racket
#lang racket
;; List ::= '() | (any . List)
(define/contract (list-length l)
  (-> list? nonnegative-integer?)
  (if (empty? l)
      0
      (+ 1 (list-length (cdr l)))
      )
  )

(println (list-length '()))
(println (list-length '(1 2 3)))
(println (list-length '(1 2 3 a b c)))
#+end_src

#+RESULTS:
: 0
: 3
: 6
*** 1.2.2 nth-element
#+begin_src racket
#lang racket

(define/contract (nth-element l n)
  (-> list? nonnegative-integer? any/c)
  (if (empty? l)
      'noresult
      (if (zero? n)
          (car l)
          (nth-element (cdr l) (- n 1))
          )
      )
  )

(displayln (nth-element '(a b c) 3))
(displayln (nth-element '(a b c) 1))
#+end_src

#+RESULTS:
: noresult
: b
*** 1.2.3 remove-first
remove-first: List-of-Symbol x Symbol -> List-of-Symbol
List-of-Symbol ::= '() | (Symbol . List-of-Symbol)
#+begin_src racket
#lang racket

(define/contract (remove-first s los)
  (-> symbol? (listof symbol?) (listof symbol?))
  (if (empty? los)
      null
      (if (eq? s (car los))
          (cdr los)
          (cons (car los) (remove-first s (cdr los)))
          )
      )
  )

(displayln (remove-first 'a '(a b c)))
(displayln (remove-first 'b '(a b c b)))
(displayln (remove-first 'l '(a b c)))
(displayln (remove-first 'l '()))
#+end_src

#+RESULTS:
: (b c)
: (a c b)
: (a b c)
: ()
*** 1.2.4 occurs-free?
#+begin_src racket
#lang racket

(module+ test
  (require rackunit))

(define/contract (occurs-free? s lcexp)
  (-> symbol? (or/c symbol? list?) boolean?)
  (cond ((symbol? lcexp) (eq? s lcexp))
        ((eq? (car lcexp) 'lambda) (and (not (eq? s (caadr lcexp)))
                                        (occurs-free? s (caddr lcexp))))
        (else (or (occurs-free? s (car lcexp))
                  (occurs-free? s (cadr lcexp))))
      )
  )

(displayln (occurs-free? 'x 'x))        ;; #t
(displayln (occurs-free? 'x 'y))        ;; #f
(displayln (occurs-free? 'x '(lambda (x) (x y)))) ;; #f
(displayln (occurs-free? 'x '(lambda (y) (x y)))) ;; #t
(displayln (occurs-free? 'x '((lambda (x) x) (x y)))) ;; #t
(displayln (occurs-free? 'x '(lambda (y) (lambda (z) (x (y z)))))) ;; #t

#+end_src

#+RESULTS:
: #t
: #f
: #f
: #t
: #t
: #t
*** 1.2.5 subst
Decomposite /subst/ into two procedures, one for each syntactic category.
S-list ::= '()
       ::= (S-exp . S-list)
S-exp ::= Symbol | S-list

#+begin_src racket
#lang racket

(define/contract (subst new old slist)
  (-> symbol? symbol? list? list?)
  (if (empty? slist)
      '()
      (cons (subst-in-sexp new old (car slist))
            (subst new old (cdr slist)))
      )
  )

(define/contract (subst-in-sexp new old sexp)
  (-> symbol? symbol? (or/c symbol? list?) (or/c symbol? list?))
  (if (symbol? sexp)
      (if (eq? sexp old)
          new
          sexp)
      (subst new old sexp)
      )
  )

(displayln (subst 'a 'b '((b c) (b () d)))) ;;  '((a c) (a () d))
#+end_src

#+RESULTS:
: ((a c) (a () d))

** 1.3 Auxiliary Procedures and Context Arguments
*** number-elements
take any list (v0 v1 v2 ...) and return the list ((0 v0) (1 v1) (2 v2) ...)
need to generalize the problem.
The second argument is an abstraction of the /context/ in which we are working, called a *context argument* or *inherited attribute*.
#+begin_src racket
#lang racket

(module+ test
  (require rackunit))

(define/contract (number-elements-from lst n)
  (-> list? integer? list?)
  (if (empty? lst)
      '()
      (cons `(,n ,(car lst))
            (number-elements-from (cdr lst) (+ 1 n)))
      )
  )

(define/contract (number-elements lst)
  (-> list? list?)
  (number-elements-from lst 0)
  )

(displayln (number-elements-from '(a b c) -1))
(displayln (number-elements '(a b c)))
#+end_src

#+RESULTS:
: ((-1 a) (0 b) (1 c))
: ((0 a) (1 b) (2 c))

*** No Mysterious Auxiliaries
   在定义辅助过程时，始终要明确其对所有实参值的行为，而不仅仅是初始值。
*** list-sum
#+begin_src racket
#lang racket

(define/contract (list-sum loi)
  (-> (listof integer?) integer?)
  (if (null? loi)
      0
      (+ (car loi)
         (list-sum (cdr loi)))
      )
  )

(displayln (list-sum '()))
(displayln (list-sum '(-1 1 2)))
#+end_src

#+RESULTS:
: 0
: 2
*** vector-sum
#+begin_src racket
#lang racket

(define/contract (vector-sum-to-n voi n)
  (-> (vectorof integer?) integer? integer?)
  (if (zero? n)
      (vector-ref voi 0)
      (+ (vector-ref voi n)
         (vector-sum-to-n voi (- n 1)))
      )
  )

(define/contract (vector-sum voi)
  (-> (vectorof integer?) integer?)
  (let ((n (vector-length voi)))
    (if (zero? n)
        0
        (vector-sum-to-n voi (- n 1)))
    )
  )

(displayln (vector-sum-to-n #(1 2 3) 1))
(displayln (vector-sum #(1 2 3)))
#+end_src

#+RESULTS:
: 3
: 6
** Exercise
*** 1.15 (duple n x) returns a list containing n copies of x.
#+begin_src racket
#lang racket

(define/contract (duple n x)
  (-> nonnegative-integer? any/c list?)
  (if (zero? n)
      null
      (cons x
            (duple (- n 1) x))
      )
  )
(displayln (duple 4 'ha))
#+end_src

#+RESULTS:
: (ha ha ha ha)
*** 1.16
#+begin_src racket
#lang racket

(define/contract (invert lst)
  (-> list? list?)
  (if (empty? lst)
      null
      (cons (list (second (car lst)) (first (car lst)))
            (invert (cdr lst)))
      )
  )

(displayln (invert '((a 1) (a 2) (b 1) (b 2))))
#+end_src

#+RESULTS:
: ((1 a) (2 a) (1 b) (2 b))
*** 1.17
#+begin_src racket
#lang racket

(define/contract (down lst)
  (-> list? list?)
  (if (null? lst)
      null
      (cons (list (car lst))
            (down (cdr lst))))
  )

(displayln (down '(1 2 (3))))
#+end_src

#+RESULTS:
: ((1) (2) ((3)))
*** 1.18
#+begin_src racket
#lang racket

(define/contract (swapper s1 s2 slist)
  (-> symbol? symbol? (listof symbol?) (listof symbol?))
  (if (null? slist)
      null
      (cond
        [(eq? s1 (car slist))
         (cons s2 (swapper s1 s2 (cdr slist)))]
        [(eq? s2 (car slist))
         (cons s1 (swapper s1 s2 (cdr slist)))]
        [else (cons (car slist)
                    (swapper s1 s2 (cdr slist)))]
        )))

(displayln (swapper 'a 'd '(a b c d)))
#+end_src

#+RESULTS:
: (d b c a)
*** 1.19
#+begin_src racket
#lang racket

(define/contract (list-set lst n x)
  (-> list? nonnegative-integer? any/c list?)
  (cond
    [(null? lst) '()]
    [(zero? n) (cons x (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (- n 1) x))]
    ))

(displayln (list-set '(a b c d) 2 '(1 2)))
#+end_src

#+RESULTS:
: (a b (1 2) d)
*** 1.20
#+begin_src racket
#lang racket

(define/contract (count-occurrences s slist)
  (-> symbol? list? nonnegative-integer?)
  (count-from-n s slist 0)
  )

(define/contract (count-from-n s slist n)
  (-> symbol? list? nonnegative-integer? nonnegative-integer?)
  (cond
    [(null? slist) n]
    [(symbol? (car slist))
     (if (eq? s (car slist))
         (count-from-n s (cdr slist) (+ n 1))
         (count-from-n s (cdr slist) n))]
    [else (+ (count-from-n s (car slist) n)
             (count-from-n s (cdr slist) n))]
    ))

(displayln (count-occurrences 'x '((f x) y (((x z) x)))))
#+end_src

#+RESULTS:
: 3
*** 1.21
#+begin_src racket
#lang racket

(define/contract (product sos1 sos2)
  (-> (listof symbol?) (listof symbol?) list?)
  (if (null? sos1)
      null
      (append (product-symbol (car sos1) sos2)
            (product (cdr sos1) sos2)
            )))

(define/contract (product-symbol s sos)
  (-> symbol? (listof symbol?) list?)
  (if (null? sos)
      '()
      (cons (list s (car sos))
            (product-symbol s (cdr sos)))
      ))
(displayln (product-symbol 'a '(x y)))
(displayln (product '(a b c) '(x y)))
#+end_src

#+RESULTS:
: ((a x) (a y))
: ((a x) (a y) (b x) (b y) (c x) (c y))
*** 1.22
#+begin_src racket
#lang racket

(define/contract (filter-in pred lst)
  (-> procedure? list? list?)
  (if (null? lst)
      null
      (let ([fst (car lst)])
        (if (pred fst)
            (cons fst (filter-in pred (cdr lst)))
            (filter-in pred (cdr lst))
            ))))
(displayln (filter-in number? '(a 2 (1 3) b 7)))
#+end_src

#+RESULTS:
: (2 7)
*** 1.23
#+begin_src racket
#lang racket

(define/contract (list-index pred lst)
  (-> procedure? list? (or/c natural? #f))
  (let list-index-from ([p pred]
                        [l lst]
                        [n 0])
    (if (null? l)
        #f
        (if (p (car l))
            n
            (list-index-from p (cdr l) (add1 n))
            ))))

(displayln (list-index number? '(a 2 (1 3) b 7)))
(displayln (list-index symbol? '(1 2 (a b) 3)))
#+end_src

#+RESULTS:
: 1
: #f

* Chapter 2
** Specifying data via Interface

** Representation Strategies for Data Types
*** The Interpreter Recipe
    1. Look at a piece of data.
    2. Decide what kind of data it represents.
    3. Extract the components of the datum and do the right thing with them.
*** A data-structure representation of environment
    Env = (empty-env) | (extend-env Var SchemeVal Env)
    Var = Sym
    [[file:eopl3/env.rkt][code]]
*** Environment Interface
    - (empty-env) = \lceil\empty\rceil
    - (apply-env \lceil{}f\rceil var) = f(var)
    - (extend-env var v \lceil{}f\rceil) = \lceil{}g\rceil,
      - where g(var_1)
        = v, if var_1 = var
        = f(var_1), otherwise
*** Data Structure Representation
    Every environment can be built by an expression in the following grammar:
    Env-exp ::= (empty-env)
              | (extend-env Identifier Scheme-value Env-exp) |
** Exercise
*** Exercise 2.4
    Consider the data type of ~stacks~ of values, with an interface consisting of the procedures empty-stack, push, pop, top, and empty-stack?. Write a specification for these operations in the style of the example above. Which operations are constructors and which are observers?
    FIXME specification:
    - constructors
      - (empty-stack) = \lceil\empty\rceil
      - (push v \lceil{}f\rceil) = \lceil{}g\rceil g_{[top]} = v, top += 1
    - observers
      - (empty-stack? \lceil{}f\rceil), #t if f = \lceil\empty\rceil, #f otherwise
      - (top \lceil{}f\rceil)
      - (pop v \lceil{}f\rceil) = \lceil{}g\rceil top -= 1
